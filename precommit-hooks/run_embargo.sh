#!/bin/bash

# This script generates AGENTS.md by running embargo, splits its lines, and stages the result.
# This consolidated process ensures a predictable two-step commit when changes occur.

# --- Configuration ---
PROJECT_PATH=$(git rev-parse --show-toplevel)
# EMBARGO.md is a temporary file generated by the tool
EMBARGO_FILE="$PROJECT_PATH/EMBARGO.md"
# AGENTS.md is the final file that will be committed
AGENTS_FILE="$PROJECT_PATH/AGENTS.md"
# Define the path to the line splitter script
LINE_SPLITTER_SCRIPT="$PROJECT_PATH/precommit-hooks/split_long_lines.py"

# --- Script Execution ---

echo "Step 1: Generating new project summary (EMBARGO.md)..."
# The command is run from the project path, and we target the project path itself.
(cd "$PROJECT_PATH" && embargo --format llm-optimized --input torchtitan)

# Check if the EMBARGO.md file was created successfully.
if [ ! -f "$EMBARGO_FILE" ]; then
    echo "Error: embargo command failed to generate EMBARGO.md." >&2
    exit 1
fi

echo "Step 2: Renaming EMBARGO.md to AGENTS.md..."
mv "$EMBARGO_FILE" "$AGENTS_FILE"

echo "Step 3: Splitting long lines in AGENTS.md..."
# Call the Python script to process the newly created file.
python3 "$LINE_SPLITTER_SCRIPT" "$AGENTS_FILE"

echo "Step 4: Staging the generated AGENTS.md file..."
# Stage the final file. Pre-commit will detect the changes and abort this
# first commit attempt, which is the desired and correct behavior.
git add "$AGENTS_FILE"

echo "Script finished. The new AGENTS.md has been staged."
# Exit with 0 for success. Pre-commit handles aborting the commit
# automatically when it detects staged file modifications.
exit 0
