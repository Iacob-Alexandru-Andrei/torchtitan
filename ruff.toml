# Ruff configuration for torchtitan/experiments/fl/
# This provides stricter linting rules for the FL experiments code
# Starting from ALL rules and only excluding what's necessary

line-length = 120
target-version = "py312"

[lint]
# Start with ALL rules enabled
select = ["ALL"]

# Ignore specific rules - combining flake8 ignores with additional necessary exclusions
ignore = [
    # From .flake8 config (maintaining compatibility with main codebase)
    "E203",    # Whitespace before ':'
    "E501",    # Line too long (handled by formatter, using B950 instead)
    "E741",    # Ambiguous variable name
    "E731",    # Do not assign a lambda expression (allow this pattern)
    "N803",    # Argument name should be lowercase (allow caps for Triton style)
    "N806",    # Variable in function should be lowercase (allow mixed case for Triton)
    "N812",    # Lowercase imported as non-lowercase (allow torch.nn.functional as F)
    "N817",    # CamelCase imported as acronym (allow DDP, TP, etc.)
    "B007",    # Loop control variable not used (from flake8-bugbear)
    "B008",    # Do not perform function call in argument defaults
    "C408",    # Unnecessary dict call - use dict literal (we like dict() syntax)

    # Additional Ruff-specific ignores for practical code
    "D203",    # 1 blank line required before class docstring (conflicts with D211)
    "D213",    # Multi-line docstring summary should start at second line (conflicts with D212)
    "D107",    # Missing docstring in __init__ (conflicts with pydoclint DOC301 - we keep separate docstrings)
    "FIX002",  # Line contains TODO
    "CPY001",  # Missing copyright notice (handled by insert-license pre-commit hook)
    "COM812",  # Missing trailing comma (conflicts with formatter)
    "COM819",  # Trailing comma prohibited (conflicts with formatter)
    "ISC001",  # Implicit string concatenation (conflicts with formatter)
    "Q000",    # Single quotes found but double quotes preferred (handled by ufmt)
    "Q001",    # Single quote multiline found but double quotes preferred (handled by ufmt)
    "Q002",    # Single quote docstring found but double quotes preferred (handled by ufmt)
    "Q003",    # Avoidable escaped quote (handled by ufmt)
    "W191",    # Indentation contains tabs (handled by ufmt)
    "E111",    # Indentation is not a multiple of four (handled by ufmt)
    "E114",    # Indentation is not a multiple of four (comment) (handled by ufmt)
    "E117",    # Over-indented (handled by ufmt)
    "D206",    # Docstring should be indented with spaces (handled by ufmt)
    "D300",    # Use triple double quotes (handled by ufmt)
    "I001",    # Import block is un-sorted or un-formatted (handled by ufmt/usort)
]

# Allow autofix for all enabled rules except formatting-related ones
# Let ufmt (black + usort) handle all formatting including import sorting
fixable = ["ALL"]
unfixable = ["COM", "Q", "W191", "E111", "E114", "E117", "D206", "D300", "I"]

# Configure pydocstyle to use Google-style docstrings
[lint.pydocstyle]
convention = "google"

[lint.per-file-ignores]
# Test files can have more relaxed rules
"tests/*.py" = [
    "ARG",     # Unused function args (fixtures)
    "S101",    # Use of assert
    "PLR2004", # Magic value comparison
]

"__init__.py" = [
    "F401",    # Unused imports (re-exports)
]

[format]
# Use Ruff's formatter with consistent settings
quote-style = "double"
indent-style = "space"
line-ending = "auto"
